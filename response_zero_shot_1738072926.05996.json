{
  "strategy": "zero_shot",
  "prompt_prefix": "SQL Schema:\ncreate table public.player (\n  player_id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  username character varying not null default 'user'::character varying,\n  health real not null default '10'::real,\n  sanity real not null default '10'::real,\n  birthday date null,\n  constraint player_pkey primary key (player_id),\n  constraint player_username_key unique (username)\n) TABLESPACE pg_default;\n\ncreate table public.item (\n  item_id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  name character varying not null default 'itemx'::character varying,\n  description character varying null,\n  constraint item_pkey primary key (item_id),\n  constraint item_item_id_fkey foreign KEY (item_id) references player (player_id)\n) TABLESPACE pg_default;\n\ncreate table public.item_owner (\n  owner_id bigint not null,\n  created_at timestamp with time zone not null default now(),\n  item_id bigint null,\n  id bigint generated by default as identity not null,\n  constraint item_owner_pkey primary key (id),\n  constraint item_owner_item_id_fkey foreign KEY (item_id) references item (item_id),\n  constraint item_owner_owner_id_fkey foreign KEY (owner_id) references player (player_id)\n) TABLESPACE pg_default;\n\ncreate table public.room (\n  room_id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  name character varying not null,\n  description character varying not null,\n  lights_on boolean not null default true,\n  constraint room_pkey primary key (room_id)\n) TABLESPACE pg_default;\n\ncreate table public.ghost (\n  ghost_id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  name character varying null,\n  favorite_food character varying null,\n  sanity_attack_power real not null default '1'::real,\n  constraint ghost_pkey primary key (ghost_id)\n) TABLESPACE pg_default;\n\ncreate table public.monster (\n  monster_id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  name character varying not null default 'zombie'::character varying,\n  health real null,\n  attack_power real not null default '5'::real,\n  defense_power real null,\n  constraint monster_pkey primary key (monster_id)\n) TABLESPACE pg_default;\n\ncreate table public.ability (\n  ability_id bigint generated by default as identity not null,\n  created_at timestamp with time zone not null default now(),\n  name character varying not null,\n  description character varying not null,\n  danger_level integer not null,\n  constraint ability_pkey primary key (ability_id)\n) TABLESPACE pg_default;\n\ncreate table public.monster_ability (\n  monster_id bigint not null,\n  created_at timestamp with time zone not null default now(),\n  ability_id bigint null,\n  id bigint generated by default as identity not null,\n  constraint monster_ability_pkey primary key (id),\n  constraint monster_ability_ability_id_fkey foreign KEY (ability_id) references ability (ability_id),\n  constraint monster_ability_monster_id_fkey foreign KEY (monster_id) references monster (monster_id)\n) TABLESPACE pg_default;\n\ncreate table public.room_belongings (\n  room_id bigint not null,\n  created_at timestamp with time zone not null default now(),\n  player_id bigint null,\n  item_id bigint null,\n  monster_id bigint null,\n  ghost_id bigint null,\n  id bigint generated by default as identity not null,\n  constraint room_belongings_pkey primary key (id),\n  constraint room_belongings_ghost_id_fkey foreign KEY (ghost_id) references ghost (ghost_id),\n  constraint room_belongings_item_id_fkey foreign KEY (item_id) references item (item_id),\n  constraint room_belongings_monster_id_fkey foreign KEY (monster_id) references monster (monster_id),\n  constraint room_belongings_player_id_fkey foreign KEY (player_id) references player (player_id),\n  constraint room_belongings_room_id_fkey foreign KEY (room_id) references room (room_id)\n) TABLESPACE pg_default;\n\nGive me a sqlite select statement that answers the question. Only respond with sqlite syntax. If there is an error do not explain it!",
  "questionResults": [
    {
      "question": "Which players have items",
      "sql": "\nSELECT DISTINCT p.username\nFROM player p\nJOIN item_owner io ON p.player_id = io.owner_id\nWHERE io.item_id IS NOT NULL;\n",
      "queryRawResponse": "[('GhostHunter99',), ('KnightOfLight',)]",
      "friendlyResponse": "Sure! GhostHunter99 and KnightOfLight have items.",
      "error": "None"
    },
    {
      "question": "Which room as multiple monsters in it?",
      "sql": "\nSELECT r.name\nFROM room r\nJOIN room_belongings rb ON r.room_id = rb.room_id\nWHERE rb.monster_id IS NOT NULL\nGROUP BY r.room_id, r.name\nHAVING COUNT(DISTINCT rb.monster_id) > 1;\n",
      "queryRawResponse": "[('Dungeon',)]",
      "friendlyResponse": "The room with multiple monsters is the Dungeon.",
      "error": "None"
    },
    {
      "question": "Which of the monsters has more attack power?",
      "sql": "\nSELECT name FROM monster ORDER BY attack_power DESC LIMIT 1;\n",
      "queryRawResponse": "[('Ice Serpent',)]",
      "friendlyResponse": "Ice Serpent",
      "error": "None"
    },
    {
      "question": "Which rooms still have their lights turned on?",
      "sql": "\nSELECT name, description \nFROM room \nWHERE lights_on = 1;\n",
      "queryRawResponse": "[('Ice Serpent',)]",
      "friendlyResponse": "Ice Serpent",
      "error": "operator does not exist: boolean = integer\nLINE 4: WHERE lights_on = 1;\n                        ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n"
    },
    {
      "question": "What are all the rooms that currently have players in them?",
      "sql": "\nSELECT DISTINCT r.name\nFROM room r\nJOIN room_belongings rb ON r.room_id = rb.room_id\nWHERE rb.player_id IS NOT NULL;\n",
      "queryRawResponse": "[('Servants\u2019 Quarters',), ('Grand Hall',), ('Library',)]",
      "friendlyResponse": "Players are in the Servants\u2019 Quarters, Grand Hall, and Library.",
      "error": "None"
    },
    {
      "question": "Which items still haven't been collected by players yet?",
      "sql": "\nSELECT i.item_id, i.name, i.description\nFROM item i\nWHERE i.item_id NOT IN (\n    SELECT io.item_id\n    FROM item_owner io\n    WHERE io.item_id IS NOT NULL\n);\n",
      "queryRawResponse": "[(3, 'Boots of Speed', 'Grants the wearer unparalleled agility'), (4, 'Amulet of Wisdom', 'An artifact that enhances intelligence'), (5, 'Potion of Energy', 'Restores stamina and boosts strength temporarily')]",
      "friendlyResponse": "Sure! The uncollected items are: Boots of Speed, Amulet of Wisdom, and Potion of Energy.",
      "error": "None"
    },
    {
      "question": "Which ability has the highest danger level?",
      "sql": "\nSELECT name FROM ability ORDER BY danger_level DESC LIMIT 1;\n",
      "queryRawResponse": "[('Fire Breath',)]",
      "friendlyResponse": "Fire Breath.",
      "error": "None"
    },
    {
      "question": "Which room has nothing in it?",
      "sql": "\nSELECT r.name \nFROM room r \nLEFT JOIN room_belongings rb ON r.room_id = rb.room_id \nWHERE rb.id IS NULL;\n",
      "queryRawResponse": "[]",
      "friendlyResponse": "An empty room has nothing in it.",
      "error": "None"
    }
  ]
}